server:
  port: 60391

spring:
  application:
    name: zuul
  profiles:
    active: dev

zuul:
  host:
    connect-timeout-millis: 58000
    socket-timeout-millis: 90000
  ignoredServices: '*'
  ignoreSecurityHeaders: false
  sensitiveHeaders:
  routes:
    aaa:
      path: /cdss/testa-api/**
      serviceId: testA
    bbb:
      path: /cdss/testb-api/**
      serviceId: testB
    system:
      path: /cdss/system-api/**
      serviceId: system
    general:
      path: /cdss/general-api/**
      serviceId: general
    klgbase:
      path: /cdss/klgbase-api/**
      serviceId: klgbase
    qualification:
      path: /cdss/qualification-api/**
      serviceId: qualification
    rule:
      path: /cdss/rule-api/**
      serviceId: rule
    login:
      path: /cdss/login-api/**
      serviceId: login
      #rpc:
      #path: /rpc-api/**
      #serviceId: rpc

security:
  basic:
  enabled: false


feign:
  hystrix:
    enabled: true #开启Hystrix以支持服务熔断[高版本默认false关闭]，如果置为false，则请求超时交给ribbon控制.
  httpclient:
    connection-timeout: 5000

##设置服务熔断超时时间[默认1s]
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 60000 #设置为20s。计算公式(Ribbon)= (ReadTimeout + ConnectTimeout) * (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1)

ribbon:
  eureka:
    enable: true
  ReadTimeout: 30000 #ribbon请求处理的超时时间3s
  ConnectTimeout: 30000 #ribbon请求连接的超时时间2s
  MaxAutoRetries: 1 #单个节点（服务器）最大重试次数，不包括首次调用
  MaxAutoRetriesNextServer: 1 #最多重试多少台个节点（服务器）,不包括首次调用
  OkToRetryOnAllOperations: false  #设置为false，只会对get请求进行重试,设置为true，便会对所有的请求进行重试