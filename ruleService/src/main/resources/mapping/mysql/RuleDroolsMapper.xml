<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jsg.dao.mysql.RuleDroolsMapper">
    <resultMap id="BaseResultMap" type="com.jsg.entity.RuleDrools">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="rule_baseId" jdbcType="INTEGER" property="ruleBaseid"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="code" jdbcType="VARCHAR" property="code"/>
        <result column="policy_type" jdbcType="INTEGER" property="policyType"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="str" jdbcType="VARCHAR" property="str"/>
        <result column="count" property="count"/>
        <result column="feedback" property="feedback"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="create_userId" jdbcType="INTEGER" property="createUserid"/>
        <result column="update_userId" jdbcType="INTEGER" property="updateUserid"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, rule_baseId, `name`, code, policy_type, version, `status`, str, create_time, 
    update_time, create_userId, update_userId
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from rule_drools
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from rule_drools
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.jsg.entity.RuleDrools">
    insert into rule_drools (id, rule_baseId, `name`, 
      code, policy_type, version, 
      `status`, str,`count`,feedback, create_time,
      update_time, create_userId, update_userId
      )
    values (#{id,jdbcType=INTEGER}, #{ruleBaseid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{code,jdbcType=VARCHAR}, #{policyType,jdbcType=INTEGER}, #{version,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{str,jdbcType=VARCHAR}, #{count},#{feedback}, #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP}, #{createUserid,jdbcType=INTEGER}, #{updateUserid,jdbcType=INTEGER}
      )
  </insert>

    <update id="updateByRuleBaseId" parameterType="com.jsg.entity.RuleDrools">
        update rule_drools
        <set>
            <if test="ruleBaseid != null">
                rule_baseId = #{ruleBaseid,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="policyType != null">
                policy_type = #{policyType,jdbcType=INTEGER},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="str != null">
                str = #{str,jdbcType=VARCHAR},
            </if>
            <if test="count != null">
                `count` = #{count},
            </if>
            <if test="feedback != null">
                feedback = #{feedback},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUserid != null">
                create_userId = #{createUserid,jdbcType=INTEGER},
            </if>
            <if test="updateUserid != null">
                update_userId = #{updateUserid,jdbcType=INTEGER},
            </if>
        </set>
        where rule_baseId =#{ruleBaseid}
    </update>


    <update id="updateByPrimaryKeySelective" parameterType="com.jsg.entity.RuleDrools">
        update rule_drools
        <set>
            <if test="ruleBaseid != null">
                rule_baseId = #{ruleBaseid,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="policyType != null">
                policy_type = #{policyType,jdbcType=INTEGER},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="str != null">
                str = #{str,jdbcType=VARCHAR},
            </if>
            <if test="count != null">
                `count` = #{count},
            </if>
            <if test="feedback != null">
                feedback = #{feedback},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUserid != null">
                create_userId = #{createUserid,jdbcType=INTEGER},
            </if>
            <if test="updateUserid != null">
                update_userId = #{updateUserid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.jsg.entity.RuleDrools">
    update rule_drools
    set rule_baseId = #{ruleBaseid,jdbcType=INTEGER},
      `name` = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      policy_type = #{policyType,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      str = #{str,jdbcType=VARCHAR},
            `count` = #{count},
            feedback = #{feedback},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_userId = #{createUserid,jdbcType=INTEGER},
      update_userId = #{updateUserid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="selectByItemCode" resultType="com.jsg.entity.RuleItems">
SELECT
	t2.*
FROM
	rule_base t1
LEFT JOIN rule_items t2 ON t1.id = t2.rule_id
WHERE
	t1.id = #{ruleBaseid}
AND t2.condition_type = '5'
and t2.rule_item_type = '1'
and t2.klg_item_code != #{itemCode}

    </select>

    <select id="selectRuleStrByCode" parameterType="string" resultType="com.jsg.entity.RuleItems">
SELECT
	*
FROM
	rule_drools t1
WHERE
	t1.`code` = 'B超Code' -- 决策类型：1-拦截；2-警告；3-建议；
	ORDER BY t1.policy_type
    </select>
</mapper>